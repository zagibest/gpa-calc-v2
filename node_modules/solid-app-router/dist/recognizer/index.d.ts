interface Delegate<THandler> {
    contextEntered?(context: THandler, route: MatchDSL<THandler>): void;
    willAddRoute?(context: THandler | undefined, route: THandler): THandler;
}
export interface Route<THandler> {
    path: string;
    alias?: string;
    handler: THandler;
    queryParams?: string[];
}
export declare type MatchCallback<THandler> = (match: MatchDSL<THandler>) => void;
interface MatchDSL<THandler> {
    (path: string, callback: MatchCallback<THandler>): void;
}
export declare type QueryParams<T = BaseObject> = {
    [K in keyof T]: T[K];
} & {
    [param: string]: string[] | string | null | undefined;
};
export interface Result<THandler> {
    handler: THandler;
    path: string;
    params: Params;
    isDynamic: boolean;
}
export declare type BaseObject<T = unknown> = Record<string | number, T>;
export declare type Params<T = BaseObject> = {
    [K in keyof T]?: T[K];
} & {
    queryParams?: BaseObject | null;
} & BaseObject;
export declare type RecognizeResults<T> = Array<Result<T>> & {
    queryParams: QueryParams;
};
export declare class RouteRecognizer<THandler = string> {
    private rootState;
    delegate: Delegate<THandler> | undefined;
    constructor();
    add(routes: Route<THandler>[]): void;
    recognize(path: string): RecognizeResults<THandler> | undefined;
}
export declare function generateQueryString(params: Params): string;
export declare function parseQueryString(queryString: string): QueryParams;
export {};
