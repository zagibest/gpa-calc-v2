import { Component, JSX } from "solid-js";
import type { BaseObject, Params, QueryParams, RecognizeResults } from "./recognizer";
export { parseQueryString, generateQueryString } from "./recognizer";
export type { Params, QueryParams } from "./recognizer";
export declare type DataFnParams<T> = {
    params: Params<T>;
    query: QueryParams;
    root: string;
    location: string;
    pending: boolean;
    level: number;
};
export declare type DataFn<T = BaseObject> = (routerState: DataFnParams<T>, routerActions: RouterActions) => BaseObject;
export interface LinkProps extends JSX.AnchorHTMLAttributes<HTMLAnchorElement> {
    href: string;
    external?: boolean;
}
export interface NavLinkProps extends LinkProps {
    activeClass?: string;
    exact?: boolean;
}
export interface RouteDefinition {
    path: string;
    component: Component<any>;
    data?: DataFn;
    children?: RouteDefinition[];
}
interface RouteHandler {
    component: Component<any> & {
        preload?: () => Promise<any>;
    };
    data?: DataFn;
}
interface Router {
    location: string;
    current: RecognizeResults<RouteHandler>;
    params: Params;
    query: QueryParams;
    pending: boolean;
    root: string;
    level: number;
    data: unknown[];
}
interface RouterActions {
    push: (p: string) => void;
    replace: (p: string) => void;
    back: () => void;
    isActive: (url: string, exact?: boolean) => boolean;
    addRoutes: (r: RouteDefinition[]) => void;
}
export declare function useRouter(): [Router, RouterActions] | undefined;
export declare function Route<T>(props: T): JSX.Element;
export declare const Link: Component<LinkProps>;
export declare const NavLink: Component<NavLinkProps>;
export declare const Router: Component<{
    routes: RouteDefinition[];
    initialURL?: string;
    root?: string;
    out?: any;
}>;
